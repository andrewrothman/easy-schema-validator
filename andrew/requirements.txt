* possibility to set resolver (system wide is okay)... or to handle resolves using middlewares

let result;

try {
	result = validateSchema();
}
catch (e) {
	
}

...or...

const { defaults: result } = await validateSchema<>(schema, data, { resolver: undefined });

const validator = new SchemaValidator<Schema>(schema);
const { defaults: result } = await validator.validate(data);

const validateData = schemaValidator<Schema>(schema);
const { defaults: result } = validateData(data);

* shorter code to actually validate... clearly seperated across lines
* use of "const"
* customization on a scoped level
* alternative to achieve similar functionality... you could write the other way with this way